generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  profile   String
  videos    Video[]
  createdAt DateTime @default(now())
}

enum RecordingBotStatus {
  JOINING
  FAILED
  RECORDING
  RECORDED
}

model Video {
  id                 String             @id @default(uuid())
  title              String
  url                String?            @unique
  userId             String
  user               User               @relation(fields: [userId], references: [id])
  isTranscribed      Boolean            @default(false)
  transcripts        Transcript[]
  summaries          Summary[]
  createdAt          DateTime           @default(now())
  Question           Question[]
  isFavourite        Boolean            @default(false)
  recordingBotStatus RecordingBotStatus @default(JOINING)
}

model Transcript {
  id        String  @id @default(uuid())
  videoId   String
  video     Video   @relation(fields: [videoId], references: [id])
  text      String
  startTime Float
  endTime   Float
  // embedding Unsupported("vector(768)")
  embedding Float[] //For now
}

enum SummaryType {
  Short
  Detailed
  Bullet_Points
}

model Summary {
  id        String      @id @default(uuid())
  videoId   String
  video     Video       @relation(fields: [videoId], references: [id])
  summary   String
  type      SummaryType
  createdAt DateTime    @default(now())
}

model Question {
  id       String   @id @default(uuid())
  userId   String
  videoId  String
  video    Video    @relation(fields: [videoId], references: [id])
  question String
  answer   String?
  askedAt  DateTime @default(now())
}

// model Embedding {
//   id          String    @id @default(uuid())
//   videoId     String
//   video       Video     @relation(fields: [videoId], references: [id])
//   transcriptId String
//   transcript  Transcript @relation(fields: [transcriptId], references: [id])
//   vector      Float[]   
// }
